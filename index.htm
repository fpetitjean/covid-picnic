<!DOCTYPE html>
<html>
  <head>

    <title>Melbourne Friend Zone</title>

    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, user-scalable=no" /> 
    <!-- Global site tag (gtag.js) - Google Analytics -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-44212575-5"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());

gtag('config', 'UA-44212575-5');
    </script>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" integrity="sha512-xodZBNTC5n17Xt2atTPuE1HxjVMSvLVW9ocqUKLsCC5CXdbqCmblAshOMAS6/keqq/sMZMZ19scR4PsZChSR7A==" crossorigin=""/>
    <style>
html, body{
  height: 100%;
  font-family:Arial;
}
  button{
    margin-left:5px;
  }
  p{
    padding-left:10px;
  }
  #map {
    height: 99%;
    width: 100%;
    z-index:100;
  }
  .searchdiv{
    position:fixed;
    top:20px;
    left: 70px;
    z-index:110;
    border-radius: 10px;
    background: rgba(255, 255, 255, 0.9);
    box-shadow: 5px 5px 5px rgba(0, 0, 0, 0.5);
    padding: 10px;
  }
  #results{
    position:fixed;
    top:150px;
    left: 70px;
    z-index:110;
    background: rgba(255, 255, 255, .8);
    border-radius: 10px;
  }
  #friends{
    position:fixed;
    bottom:20px;
    left: 70px;
    width:80%;
    z-index:110;
    background: rgba(255, 255, 255, 0.8);
    border-radius: 10px;
  }
    </style>

    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js" integrity="sha512-XQoYMqMTK8LvdxXYG3nZ448hOEQiglfqkJs1NOQV44cWnUrBc8PkAOcXy20w0vlaXaVUearIOBhiXZ5V3ynxwA==" crossorigin=""></script>
    <div class="searchdiv">
      <p>Enter your address. Once you've got your circle, enter your friends. You will quickly find your Friend Zone!</p>
      <p>
      <input type="text" id="address"/>
      <button onclick="lookupAndDraw()" id="search">Search</button>
      <button onclick="clearMe()">Reset</button>
      </p>
      <p>
      <input type="checkbox" id="bbq" name="bbq" value="bbq" checked="true" onclick='changeBBQ(this);'>
      <label for="vehicle1"> Display BBQ</label>
    </p>
    </div>
    <div id="results"></div>

    <div id="friends"></div>

  </head>
  <body>

    <div id="map"></div>
    <script>


      $(document).ready(function(){
        $('#address').keypress(function(e){
          if(e.keyCode==13)
            $('#search').click();
        });
        $.ajax({
        type: "GET",
        url: "https://data.melbourne.vic.gov.au/api/views/5nb5-w7hq/rows.csv",
        dataType: "text",
        success: function(data) {
          processBBQData(data);
          //console.log(data);
        }
     });
      });

var mymap = L.map('map').setView([-37.814, 144.96332], 13);

L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw', {
  maxZoom: 18,
  attribution: 
  'Dev <a href="https://twitter.com/ArnaudProuzeau" target="_blank">Arnaud</a>, '+
  '<a href="https://twitter.com/LeDataMiner" target="_blank">Fran&ccedil;ois</a> and '+
  '<a href="https://github.com/HerrmannM/" target="_blank">Matthieu</a> '+
  '| Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, ' +
  '<a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, ' +
  'Imagery &copy; <a href="https://www.mapbox.com/">Mapbox</a>'+
  '| <a href="http://melbournefriendzone.com/disclaimer.txt" target="_blank">Disclaimer</a>',
  id: 'mapbox/streets-v11',
  tileSize: 512,
  zoomOffset: -1
}).addTo(mymap);

var popup = L.popup();
var myLayerGroup=L.featureGroup([]).addTo(mymap); 
var friends = {};
var palette = ['#7fc97f','#beaed4','#fdc086','#ffff99','#386cb0'];

var handleDict = {};
var handleToCercle = new Map();


// popup to explain how to move the circle
var firstCircle = true;
var popupExp = null;

//BBQ
var bbqArray = [];
var bbqLayer =  L.featureGroup([]).addTo(mymap);
var displayBBQ = true;

function addCircle(lat,lon,id,text){
  let circleColor = palette[Object.keys(friends).length%palette.length];
  console.log(circleColor);
  gps = [lat,lon];
  le_cercle = L.circle(gps, {
    radius: 5000,
    color: 'blue',
    weight:1,
    fillColor: circleColor,
    fillOpacity: 0.4
  }
  );
  le_cercle.bindPopup(text);
  myLayerGroup.addLayer(le_cercle);
  friends[text] = le_cercle;

  // Handle pour manipuler le cercle
  var la_handle = L.circle(gps, {
    radius: 50,
    color: '#f03',
    weight:1,
    fillColor: '#f03',
    fillOpacity: 1
  }
  );
  myLayerGroup.addLayer(la_handle);

  if(firstCircle){
    placeFirstPopup(gps);
    firstCircle = false;
  }


  handleDict[text] = la_handle;
  handleToCercle.set(la_handle, le_cercle);

  la_handle.on({
    mousedown: function (e) {
      mymap.closePopup();
      mymap.dragging.disable();
      mymap.on('mousemove', function(e) {
        la_handle.setLatLng(e.latlng);
        handleToCercle.get(la_handle).setLatLng(e.latlng);

        //handleToCercle[]
      });
    },
    mouseup: function (e) {
      mymap.removeEventListener('mousemove');
      mymap.dragging.enable();
    },
    mouseover: function(e){
      la_handle.setStyle({
        color: 'blue',
        fillColor: 'blue'
      });
    },
    mouseout: function(e){
      la_handle.setStyle({
        color: '#f03',
        fillColor: '#f03'
      });
    }
  });
  filterBBQ();
  /* circleMarker = L.circleMarker(gps,{radius:2,weight:2});
    myLayerGroup.addLayer(circleMarker); */
}

function placeFirstPopup(gps){
  var screenPos = L.point(mymap.project(gps, mymap.getZoom()));
  var popupScreenPos = screenPos.subtract(L.point(0, 10));
  var popupPos = mymap.unproject(popupScreenPos, mymap.getZoom());

  popupExp = L.popup()
    .setLatLng(popupPos)
    .setContent("Move me to adjust the position of the zone!")
    .openOn(mymap);
}


// To Delete?
function removeCircle(layer){
  mymap.removeLayer(circle);
}

function removeHandle(layer){
  var handleFound = null;
  // On itere sur la Map des handle pour trouver celle qui correspond au cerle
  for (let [key, value] of handleToCercle) {
    if(layer == value){
      handleFound = key;
    }
  }

  if(handleFound != null){
    myLayerGroup.removeLayer(handleFound);
    handleToCercle.delete(handleFound);
  }
}

function clearMe(){
  //remove all circles
  myLayerGroup.clearLayers();
  friends={};
  handleDict = {};
  refreshFriendsList();
  document.getElementById('results').innerHTML = '';
  filterBBQ();
}

function refreshFriendsList(){
  let myFriendsDiv = document.getElementById('friends');
  myFriendsDiv.innerHTML = '';
  let br     = document.createElement('br');

  for (const [addressK, layer] of Object.entries(friends)) {
    let span = document.createElement('p');
    let address = document.createTextNode(addressK); 
    span.appendChild(address);

    let button = document.createElement('button');  
    let text = document.createTextNode("remove"); 
    button.appendChild(text); 
    button.addEventListener('click', function() {
      myLayerGroup.removeLayer(layer);
      removeHandle(layer);
      delete friends[addressK];
      filterBBQ();  
      refreshFriendsList();
    }, false);
    span.appendChild(button);
    myFriendsDiv.appendChild(span);
    myFriendsDiv.appendChild(br);
  }
  rezoom();
}

function rezoom(){
  if(myLayerGroup.getLayers().length > 0){
    mymap.fitBounds(myLayerGroup.getBounds());
  }
}

function selectEntry(entry){
  if(! (entry['display_name'] in friends) ){
    addCircle(entry['lat'],entry['lon'],entry['place_id'],entry['display_name']);
    //console.log(entry);
    document.getElementById('results').innerHTML = '';
    refreshFriendsList();
  }
}

function displayResults(data){
  //console.log(data);
  document.getElementById('results').innerHTML = '';
  var myResultsDiv = document.getElementById('results');
  var br     = document.createElement('br');

  if(data.length==0){
    var span = document.createElement('p');
    var address = document.createTextNode('No results');
    span.appendChild(address);
    myResultsDiv.appendChild(span);
  }

  i = 0;
  for(i = 0 ; i<data.length ; i++){
    let entry = data[i];
    var span = document.createElement('p');
    var address = document.createTextNode(entry['display_name']); 
    span.appendChild(address);


    var button = document.createElement('button');  
    var text = document.createTextNode("select"); 
    button.appendChild(text); 
    button.addEventListener('click', function() {
      selectEntry(entry);
    }, false);
    span.appendChild(button);
    myResultsDiv.appendChild(span);
    myResultsDiv.appendChild(br);
  }
}

function lookupAndDraw(){
  adresse = document.getElementById('address').value;
  /* console.log(document.getElementById('search').textContent);
    console.log(adresse); */
  $.getJSON('https://nominatim.openstreetmap.org/search?format=json&limit=3&countrycodes=au&q=' + adresse, function(data) {
    displayResults(data);
  });
}

// Comme il y a des virgule a l'interieur des champs, je rajoute 1 au header
  function processBBQData(data){
    var allTextLines = data.split(/\r\n|\n/);
      var headers = allTextLines[0].split(',');
      // Dirty fix
      headers.push("Coordinate2");
      var lines = [];

      for (var i=1; i<allTextLines.length; i++) {
          var data = allTextLines[i].split(',');
          if (data.length == headers.length) {

              var tarr = [];
              tarr[0] = data[0];
              tarr[1] = data[1].split('(')[1].trim();
              tarr[2] = data[2].split(')')[0].trim();
              lines.push(tarr);
          }
      }
      // console.log(headers);
      // console.log(lines);

      for(var j=0; j<lines.length; j++)
    {
      var bbq = {};
      bbq['Text'] = lines[j][0];
      bbq['LatLong'] = L.latLng(lines[j][1], lines[j][2]);
      

      var bbqVisu = L.circle(bbq['LatLong'], {
      radius: 50,
      color: 'brown',
      weight:1,
      fillColor: 'brown',
      fillOpacity: 1
      });
      bbqVisu.bindPopup(bbq['Text']);
      bbq['shape'] = bbqVisu;
      //bbqLayer.addLayer(bbqVisu);

      bbqArray.push(bbq);


    }
    filterBBQ()
    //console.log(bbqArray);
  }

  function filterBBQ(){
    bbqLayer.clearLayers();
    if(displayBBQ){
      var bbqToDraw = [];
      var countFriends = 0;
      for (var key in friends){
        var centerFriend = friends[key].getLatLng();
        //console.log(friends[key]);
        for(var i=0; i<bbqArray.length; i++){
          //console.log(bbqArray[i]);
          if(centerFriend.distanceTo(bbqArray[i]['LatLong']) < 5000){
            //console.log('got one');
            if(!bbqToDraw.includes(bbqArray[i])){
              bbqToDraw.push(bbqArray[i]);
            }
          }
        }
        //console.log(centerFriend);
          //console.log( key, friends[key] );
          countFriends ++;
      }

      if(countFriends == 0){
        bbqToDraw = bbqArray;
      }

      for(var j=0; j<bbqToDraw.length; j++){
        bbqLayer.addLayer(bbqToDraw[j]['shape']);
      }
    }
  }

  function changeBBQ(bbqCB){
    //console.log('BBQ: '+bbqCB.checked);
    displayBBQ = bbqCB.checked;
    filterBBQ();
  }
    </script>


  </body>
</html>
