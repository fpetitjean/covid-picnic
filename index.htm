<!DOCTYPE html>
<html>
  <head>

    <title>Melbourne Friend Zone</title>

    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, user-scalable=no" /> 
    <!-- Global site tag (gtag.js) - Google Analytics -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-44212575-5"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());

gtag('config', 'UA-44212575-5');
    </script>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" integrity="sha512-xodZBNTC5n17Xt2atTPuE1HxjVMSvLVW9ocqUKLsCC5CXdbqCmblAshOMAS6/keqq/sMZMZ19scR4PsZChSR7A==" crossorigin=""/>
    <style>
html, body{
  height: 100%;
  font-family:Arial;
}
  button{
    margin-left:5px;
  }
  p{
    padding-left:10px;
  }
  #map {
    height: 99%;
    width: 100%;
    z-index:100;
  }
  .searchdiv{
    position:fixed;
    top:20px;
    left: 70px;
    z-index:110;
    border-radius: 10px;
    background: rgba(255, 255, 255, 0.9);
    box-shadow: 5px 5px 5px rgba(0, 0, 0, 0.5);
    padding: 10px;
  }
  #results{
    position:fixed;
    top:150px;
    left: 70px;
    z-index:110;
    background: rgba(255, 255, 255, .8);
    border-radius: 10px;
  }
  #friends{
    position:fixed;
    bottom:20px;
    left: 70px;
    width:80%;
    z-index:110;
    background: rgba(255, 255, 255, 0.8);
    border-radius: 10px;
  }
    </style>

    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js" integrity="sha512-XQoYMqMTK8LvdxXYG3nZ448hOEQiglfqkJs1NOQV44cWnUrBc8PkAOcXy20w0vlaXaVUearIOBhiXZ5V3ynxwA==" crossorigin=""></script>
    <div class="searchdiv">
      Enter your address. Once you've got your circle, enter your friends. You will quickly find your Friend Zone!
      <br/>
      <input type="text" id="address"/>
      <button onclick="lookupAndDraw()" id="search">Search</button>
      <button onclick="MFZ.clearMe()">Reset</button>
        <input type="checkbox" id="bbq" name="bbq" value="bbq" checked="true" onclick='changeBBQ(this);'>
        <label for="bbq"> BBQs</label>
        <input type="checkbox" id="playground" name="playground" value="playground" checked="true" onclick='changePlayground(this);'>
        <label for="playground"> Playgrounds</label><br/>
        <span style="font-size: small;"><a href="https://www.dhhs.vic.gov.au/coronavirus" target="_blank">Covid information</a></span>
    </div>
    <div id="results"></div>

    <div id="friends"></div>

  </head>
  <body>

    <div id="map"></div>
    <script>


      $(document).ready(function(){
        $('#address').keypress(function(e){
          if(e.keyCode==13)
            $('#search').click();
        });
        $.ajax({
          type: "GET",
          url: "https://melbournefriendzone.com/bbq_Melbourne.csv",
          dataType: "text",
          success: function(data) {
            processMarkerFile(data,'bbq');
          }
        });

        $.ajax({
          type: "GET",
          url: "https://melbournefriendzone.com/playground.csv",
          dataType: "text",
          success: function(data) {
            processMarkerFile(data,'playground');
          }
        });
        
      });

var mymap = L.map('map').setView([-37.814, 144.96332], 13);

L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw', {
  maxZoom: 18,
  attribution: 
  'Dev <a href="https://twitter.com/ArnaudProuzeau" target="_blank">Arnaud</a>, '+
  '<a href="https://twitter.com/LeDataMiner" target="_blank">Fran&ccedil;ois</a> and '+
  '<a href="https://github.com/HerrmannM/" target="_blank">Matthieu</a> '+
  '| Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, ' +
  '<a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, ' +
  'Imagery &copy; <a href="https://www.mapbox.com/">Mapbox</a>, '+
  'Address Search <a href="https://nominatim.org/">Nominatim</a>, '+
  '| <a href="http://melbournefriendzone.com/disclaimer.txt" target="_blank">Disclaimer</a>',
  id: 'mapbox/streets-v11',
  tileSize: 512,
  zoomOffset: -1
}).addTo(mymap);



/** Create the Melbroune Friend Zone Module
 * Input:
 *   palette: colours list for circles
 */
MFZ = function(palette = ['#7fc97f','#beaed4','#fdc086','#ffff99','#386cb0']){

  // --- --- --- Private variables (not exported) --- --- --- //
  /** Colours */
  const handle_over_col = 'blue';
  const handle_col = '#f03';

  /** Track very first circle added by the user: explain how to move the circles */
  let firstCircle = true;
  let popupExp = null;

  /** Dictionary address->object{le_cercle:LObject, la_handle:LObject } */
  let friends = new Map();

  let uid = 0;

  /** Layer group to store the circles */
  let myLayerGroup = L.featureGroup([]).addTo(mymap);


  // --- --- --- Private functions (not exported) --- --- --- //

  /** Update zoom according to the content of the layer group */
  function rezoom(){
    if(myLayerGroup.getLayers().length > 0){
      mymap.fitBounds(myLayerGroup.getBounds());
    }
  }

  /** Display first popup giving a bit of explanation */
  function display_first_popup(gps){
    if(firstCircle){
      firstCircle = false;
      let screenPos = L.point(mymap.project(gps, mymap.getZoom()));
      let popupScreenPos = screenPos.subtract(L.point(0, 10));
      let popupPos = mymap.unproject(popupScreenPos, mymap.getZoom());
      popupExp = L.popup()
        .setLatLng(popupPos)
        .setContent("Move me to adjust the position of the zone!")
        .openOn(mymap);
    }else{
      mymap.closePopup();
    }
  }

  /** Configure la_handle */
  function configure_handle(uid) {

    let {la_handle:la_handle, le_cercle:le_cercle, text:text} = friends.get(uid);

    /** When pressing with the mouse */
    function mdown(e){
      mymap.closePopup();
      mymap.dragging.disable();
      mymap.on('mousemove', e => {
        la_handle.setLatLng(e.latlng);
        le_cercle.setLatLng(e.latlng);
      });
    }

    /** When releasing */
    function mup(e){
      mymap.removeEventListener('mousemove');
      mymap.dragging.enable();
      filterAllMarkers();
    }

    /** Change colour when hovering */
    function mover(e){
      la_handle.setStyle({
        color: 'black',
        fillColor: handle_over_col
      });
    }

    /** Revert the style back when leaving the area */
    function mout(e){
      la_handle.setStyle({
        color: 'black',
        fillColor: handle_col
      });
    }

    /** Create and return the properties */
    la_handle.on({
      mousedown:mdown,
      mouseup: mup,
      mouseover: mover,
      mouseout: mout
    });
  }

  /** Add a circle on the map, with latitude, longitude, identifier and address text */
  function addCircle(lat,lon,id,text){
    // Get the next colour from the palette
    let circleColor = palette[friends.size % palette.length];

    // Leaf gps format
    let gps = [lat, lon];

    // Main circle
    let le_cercle = L.circle(gps,{
      radius: 5000,
      color: 'blue',
      weight:1,
      fillColor: circleColor,
      fillOpacity: 0.4
    });

    // Clickable handle to move the circle
    let la_handle = L.circleMarker(gps, {
      radius: 5,
      color: 'black',
      fillColor: handle_col,
      fillOpacity: 1,
      weight:1
    });

    // Adding information on the circle and storing infor
    le_cercle.bindPopup(text);
    myLayerGroup.addLayer(le_cercle);
    myLayerGroup.addLayer(la_handle);
    friends.set(uid, {le_cercle: le_cercle, la_handle: la_handle, text: text});
    // Display first popup
    display_first_popup(gps);

    // Configure the handle
    configure_handle(uid);

    filterAllMarkers();
    ++uid;
  }

  /** Refresh the list of friends after changing the state */
  function refreshFriendsList(){
    // Get the div en clear its content
    let myFriendsDiv = document.getElementById('friends');
    myFriendsDiv.innerHTML = '';
    let br = document.createElement('br');

    // For each friends map:
    for(const [uid, obj] of friends ){
      let par = document.createElement('p')
      let address = document.createTextNode(obj.text);
      par.appendChild(address);

      let button = document.createElement('button');
      let text = document.createTextNode("remove");
      button.appendChild(text); 
      button.addEventListener('click', function() {
        myLayerGroup.removeLayer(obj.le_cercle);
        myLayerGroup.removeLayer(obj.la_handle);
        friends.delete(uid);
        filterAllMarkers();
        refreshFriendsList();
      }, false);
      par.appendChild(button);
      myFriendsDiv.appendChild(par);
      myFriendsDiv.appendChild(br);
    }
    rezoom();
  }

  /** Select an entry from the results. The entry is an object  */
  function selectEntry(entry){
    if(!friends.has(entry['display_name'])){
      addCircle(entry['lat'],entry['lon'],entry['place_id'],entry['display_name']);
      refreshFriendsList();
      document.getElementById('results').innerHTML = '';
    }
  }

  // --- --- --- Public API (exported) --- --- --- //

  function displayResults(data){
    // console.log(data);

    // Acces HTML
    let myResultsDiv = document.getElementById('results');

    // Clear previous results
    myResultsDiv.innerHTML = '';

    // Process input data: no result
    if(data.length===0){
      let par = document.createElement('p');
      let address = document.createTextNode('No results');
      par.appendChild(address);
      myResultsDiv.appendChild(par);
    } else {
      // 'data' is an array of results: create a line with a "select" button per entry.
      let br = document.createElement('br');
      for(i=0; i<data.length ; i++){
        let entry = data[i];
        let par = document.createElement('p');
        let address = document.createTextNode(entry['display_name']);
        let button = document.createElement('button');
        let text = document.createTextNode("select");

        par.appendChild(address);
        button.appendChild(text);
        button.addEventListener('click', function(){ selectEntry(entry); }, false);
        par.appendChild(button);
        myResultsDiv.appendChild(par);
        myResultsDiv.appendChild(br);
      }
    }
  }

  /** Clear all circles */
  function clearMe(){
    //remove all circles
    myLayerGroup.clearLayers();
    friends = new Map();
    mymap.closePopup();
    refreshFriendsList();
    document.getElementById('results').innerHTML = '';
    filterAllMarkers();
  }

  function getFriends(){
    return friends;
  }

  // Return our function
  return {
    displayResults: displayResults,
    clearMe: clearMe,
    getFriends: getFriends
  };

}();



function lookupAndDraw(){
  adresse = document.getElementById('address').value;
  /* console.log(document.getElementById('search').textContent);
  console.log(adresse); */
  $.getJSON('https://nominatim.openstreetmap.org/search?format=json&limit=3&countrycodes=au&q=' + adresse, function(data) {
    MFZ.displayResults(data);
  });
}


const bbqColor = '#ff7f00';
const pgColor = '#4daf4a';

const markerSize = function(){return 4;}();
  //BBQ
var markerArrays = {"bbq":[],"playground":[]};
var markerStyles = {
    "bbq":{
      radius: markerSize,
      color: 'black',
      weight:1,
      fillColor: bbqColor,
      fillOpacity: 1
    }
    ,"playground":{
      radius: markerSize,
      color: 'black',
      weight:1,
      fillColor: pgColor,
      fillOpacity: 1
    }};
var displayMarkers = {"bbq":true,"playground":true};
var markerLayers = {"bbq":L.featureGroup([]).addTo(mymap),"playground":L.featureGroup([]).addTo(mymap)};

// Comme il y a des virgule a l'interieur des champs, je rajoute 1 au header
function processMarkerFile(data,typeStr){
  let allTextLines = data.split(/\r\n|\n/);

  for(var i=1; i<allTextLines.length; i++) { //skip header
    let lines = allTextLines[i].split(',');
    let latlng = L.latLng(lines[1], lines[0]);
    let markerVisu = L.circleMarker(latlng, markerStyles[typeStr]);
    markerArrays[typeStr].push(markerVisu);
  }
  filterMarkers(typeStr);
//console.log(bbqArray);
}

function filterAllMarkers(){
  filterMarkers('bbq');
  filterMarkers('playground');
}

function filterMarkers(typeStr){
  layer = markerLayers[typeStr];
  layer.clearLayers();
  let markerArray = markerArrays[typeStr];
  if(displayMarkers[typeStr]){
    let markerToDraw = [];
    let friends = MFZ.getFriends();
    
    for(var i=0; i<markerArray.length; i++){
      shouldDisplay = true;
      latlong = markerArray[i].getLatLng();
      for(const [key, obj] of friends ){
        var centerFriend = obj.le_cercle.getLatLng();

        if(centerFriend.distanceTo(latlong) > 5000){
          shouldDisplay = false;
          break;
        }
      }
      if(shouldDisplay){
        markerToDraw.push(markerArray[i]);
      }
    }

    if(markerToDraw.length == 0){
      markerToDraw = markerArray;
    }
    for(var j=0; j<markerToDraw.length; j++){
      layer.addLayer(markerToDraw[j]);
    }
  }
}

function changeBBQ(bbqCB){
  let str = 'bbq';
  displayMarkers[str] = bbqCB.checked;
  filterMarkers(str);
}

function changePlayground(pgCB){
  let str = 'playground';
  displayMarkers[str] = pgCB.checked;
  filterMarkers(str);
}

    </script>


  </body>
</html>
