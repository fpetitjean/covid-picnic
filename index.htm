<!DOCTYPE html>
<html>
  <head>

    <title>Melbourne Friend Zone</title>

    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <!-- Global site tag (gtag.js) - Google Analytics -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-44212575-5"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());

gtag('config', 'UA-44212575-5');
    </script>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" integrity="sha512-xodZBNTC5n17Xt2atTPuE1HxjVMSvLVW9ocqUKLsCC5CXdbqCmblAshOMAS6/keqq/sMZMZ19scR4PsZChSR7A==" crossorigin=""/>
    <style>
      * { box-sizing: border-box; }
      body {
    padding: 0;
    margin: 0;
}
html, body, #map {
    height: 100%;
    width: 100vw;
  font-family:Arial;
}
  button{
    margin-left:5px;
  }
  p{
    padding-left:10px;
  }
  #map {
    height: 99%;
    width: 100%;
    z-index:100;
  }
  .headerPage{
    position:fixed;
    top:0px;
    z-index:110;
    width: 100%;
  }
  .searchdiv{
    /*position:fixed;*/
    /*top:0px;*/
    /*left: 70px;*/
    /*width: 100%;*/
    z-index:110;
    /*border-radius: 10px;*/
    background: rgba(230, 230, 230, 1);
    box-shadow: 2px 2px 2px rgba(0, 0, 0, 0.5);
    padding: 10px;
  }
  #results{
    position:fixed;
    top:150px;
    left: 70px;
    z-index:110;
    background: rgba(255, 255, 255, .8);
    border-radius: 10px;
  }

  #footerPage{
    position:fixed;
    width:100%;
    z-index:110;
    bottom:0px;
    left: 0px;
    display: flex; 
    flex-direction: column;
  }
  #instruction{
    background: rgba(93, 188, 210, .8); /*rgb(93, 188, 210) */
    border-radius: 10px;
    /*width: 500px;*/
    max-width: 700px;
    margin: 10px;
    padding-right: 8px;
    float: center;
    display: flex; 
    flex-direction: row;
    justify-content: space-around;
  }

  #friendsDiv{
    /*position:fixed;*/
    margin-bottom: 0px;
    padding-left:10px;
    padding-right:10px;
    background: rgba(230, 230, 230, 1);
    /*border-radius: 10px;*/
  }
  #attribution{
    margin-top: 0px;
    position: relative;
    background: rgba(230, 230, 230, 1);
    text-align:right;
    font-size: 12px;
  }
  #instIcon{
    margin-left: 8px;
    margin-top: 8px;
    width: 28px;
    /*float: left;*/
  }
  .textTooltip{
    margin-left: 8px;
  }
  .autocomplete {
      /*the container must be positioned relative:*/
      position: relative;
      display: inline-block;
    }
    input {
      border: 1px solid transparent;
      background-color: #f1f1f1;
      /*padding: 10px;*/
      font-size: 16px;
    }
    input[type=text] {
      background-color: #f1f1f1;
      width: 100%;
    }
    button {
      border: 1px solid transparent;
      background-color: #f1f1f1;
      /*padding: 10px;*/
      font-size: 16px;
      background-color: DodgerBlue;
      color: #fff;
    }
    .autocomplete-items {
      position: absolute;
      border: 1px solid #d4d4d4;
      border-bottom: none;
      border-top: none;
      z-index: 99;
      /*position the autocomplete items to be the same width as the container:*/
      top: 100%;
      left: 0;
      right: 0;
    }
    .autocomplete-items div {
      /*padding: 10px;*/
      cursor: pointer;
      background-color: #fff;
      border-bottom: 1px solid #d4d4d4;
    }
    .autocomplete-items div:hover {
      /*when hovering an item:*/
      background-color: #e9e9e9;
    }
    .autocomplete-active {
      /*when navigating through the items using the arrow keys:*/
      background-color: DodgerBlue !important;
      color: #ffffff;
    }

    .legend {
      position: relative;
      line-height: 18px;
      color: #555;
      margin-right: 8px;
      width: 160px;
      float: right;
      /*margin-top: 50px;*/
    }
    .legend i {
        width: 18px;
        height: 18px;
        float: left;
        margin-right: 8px;
        opacity: 0.7;
    }
    .info {
        padding: 6px 8px;
        /*font: 14px/16px Arial, Helvetica, sans-serif;*/
        font: 16px Arial, Helvetica, sans-serif;
        background: white;
        background: rgba(255,255,255,0.8);
        box-shadow: 0 0 15px rgba(0,0,0,0.2);
        border-radius: 5px;

        margin-top: 10px;
        
    }
    </style>

    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js" integrity="sha512-XQoYMqMTK8LvdxXYG3nZ448hOEQiglfqkJs1NOQV44cWnUrBc8PkAOcXy20w0vlaXaVUearIOBhiXZ5V3ynxwA==" crossorigin=""></script>
    
  </head>
  <body>

    <div id="map"></div>
    <div class="headerPage">
    <div class="searchdiv">
      <!-- Enter your address. Once you've got your circle, enter your friends. You will quickly find your Friend Zone!
      <br/> -->
      <div class="autocomplete">
        <input type="text" id="address"/>
      </div>
      <button onclick="lookupAndDraw()" id="search">Search</button>
      <!-- <button onclick="MFZ.clearMe()">Reset</button> -->
        <!-- <input type="checkbox" id="bbq" name="bbq" value="bbq" checked="true" onclick='changeBBQ(this);'>
        <label for="bbq"> BBQs</label>
        <input type="checkbox" id="playground" name="playground" value="playground" checked="true" onclick='changePlayground(this);'>
        <label for="playground"> Playgrounds</label><br/> --><br>
        <span style="font-size: small;"><a href="https://www.dhhs.vic.gov.au/coronavirus" target="_blank">Covid information</a></span>
    </div>
    <div id="legendMap" class="legend info">
      
    </div>
  </div>
    <div id="results"></div>
    <div id="footerPage">
      <div id="instruction">
        <div class="Inst-item"><img src="./images/inst-icon.png" id="instIcon"/> </div>
        <div class="Inst-item textTooltip">Enter your address. Once you've got your circle, enter your friends. You will quickly find your Friend Zone!</div>
        
      </div>
    <div id="friendsDiv">
      <h3>Adresses <button onclick=\"MFZ.clearMe()\">Reset</button></h3>
      <div id="friends">
      <p>No adresses yet!</p>
      </div>
    </div>
    <div id="attribution">
        Dev <a href="https://twitter.com/ArnaudProuzeau" target="_blank">Arnaud</a>,
        <a href="https://twitter.com/LeDataMiner" target="_blank">Fran&ccedil;ois</a> and 
        <a href="https://github.com/HerrmannM/" target="_blank">Matthieu</a> 
        | Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, 
        <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, 
        Imagery &copy; <a href="https://www.mapbox.com/">Mapbox</a>, 
        Address Search <a href="https://nominatim.org/">Nominatim</a>, 
        | <a href="http://melbournefriendzone.com/disclaimer.txt" target="_blank">Disclaimer</a>
      </div>
    </div>
    <script>


      $(document).ready(function(){
        $('#address').keypress(function(e){
          if(e.keyCode==13)
            $('#search').click();
        });
        $.ajax({
          type: "GET",
          url: "https://melbournefriendzone.com/bbq.csv",
          dataType: "text",
          success: function(data) {
            processMarkerFile(data,'bbq');
          }
        });

        $.ajax({
          type: "GET",
          url: "https://melbournefriendzone.com/playground.csv",
          dataType: "text",
          success: function(data) {
            processMarkerFile(data,'playground');
          }
        });
      });

var mymap = L.map('map').setView([-37.814, 144.96332], 13);

L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw', {
  maxZoom: 18,
  attribution: 
  'Dev <a href="https://twitter.com/ArnaudProuzeau" target="_blank">Arnaud</a>, '+
  '<a href="https://twitter.com/LeDataMiner" target="_blank">Fran&ccedil;ois</a> and '+
  '<a href="https://github.com/HerrmannM/" target="_blank">Matthieu</a> '+
  '| Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, ' +
  '<a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, ' +
  'Imagery &copy; <a href="https://www.mapbox.com/">Mapbox</a>, '+
  'Address Search <a href="https://nominatim.org/">Nominatim</a>, '+
  '| <a href="http://melbournefriendzone.com/disclaimer.txt" target="_blank">Disclaimer</a>',
  id: 'mapbox/streets-v11',
  tileSize: 512,
  zoomOffset: -1
}).addTo(mymap);

const bbqColor = '#ff7f00';
const pgColor = '#4daf4a';

var div = document.getElementById("legendMap");

div.innerHTML += '<input type="checkbox" id="bbq" name="bbq" value="bbq" checked="true" onclick="changeBBQ(this);"><i style="background:' + bbqColor + '"></i> BBQs <br>';
div.innerHTML += '<input type="checkbox" id="playground" name="playground" value="playground" checked="true" onclick="changePlayground(this);"><i style="background:' + pgColor + '"></i> Playgrounds <br>';

var markersReady = {"bbq": false, "playground":false};

var currentFocus;
var inputField = document.getElementById("address");

/** Create the Melbroune Friend Zone Module
 * Input:
 *   palette: colours list for circles
 */
MFZ = function(palette = ['#7fc97f','#beaed4','#fdc086','#ffff99','#386cb0']){

  // --- --- --- Private variables (not exported) --- --- --- //
  /** Colours */
  const handle_over_col = 'blue';
  const handle_col = 'white';

  /** Track very first circle added by the user: explain how to move the circles */
  let firstCircle = true;
  let popupExp = null;

  /** Dictionary address->object{le_cercle:LObject, la_handle:LObject } */
  let friends = new Map();

  let uid = 0;

  /** Layer group to store the circles */
  let myLayerGroup = L.featureGroup([]).addTo(mymap);

  readURLVariable();

  // --- --- --- Private functions (not exported) --- --- --- //

  /** Update zoom according to the content of the layer group */
  function rezoom(){
    if(myLayerGroup.getLayers().length > 0){
      mymap.fitBounds(myLayerGroup.getBounds());
    }
  }

  /** Display first popup giving a bit of explanation */
  function display_first_popup(gps){
    if(firstCircle){
      firstCircle = false;
      let screenPos = L.point(mymap.project(gps, mymap.getZoom()));
      let popupScreenPos = screenPos.subtract(L.point(0, 10));
      let popupPos = mymap.unproject(popupScreenPos, mymap.getZoom());
      popupExp = L.popup()
        .setLatLng(popupPos)
        .setContent("Move me to adjust the position of the zone!")
        .openOn(mymap);

      let divInst = document.getElementById("instruction");
      divInst.innerHTML = '';
    }else{
      mymap.closePopup();
    }
  }

  /** Configure la_handle */
  function configure_handle(uid) {

    let {la_handle:la_handle, le_cercle:le_cercle, text:text} = friends.get(uid);

    /** When pressing with the mouse */
    function mdown(e){
      mymap.closePopup();
      mymap.dragging.disable();
      mymap.on('mousemove', e => {
        la_handle.setLatLng(e.latlng);
        le_cercle.setLatLng(e.latlng);
      });
    }

    /** When releasing */
    function mup(e){
      mymap.removeEventListener('mousemove');
      mymap.dragging.enable();
      filterAllMarkers();
    }

    /** Change colour when hovering */
    function mover(e){
      la_handle.setStyle({
        color: 'black',
        fillColor: handle_over_col
      });
    }

    /** Revert the style back when leaving the area */
    function mout(e){
      la_handle.setStyle({
        color: 'black',
        fillColor: handle_col
      });
    }

    /** Create and return the properties */
    la_handle.on({
      mousedown:mdown,
      mouseup: mup,
      mouseover: mover,
      mouseout: mout
    });
  }

  /** Add a circle on the map, with latitude, longitude, identifier and address text */
  function addCircle(lat,lon,id,text){
    // Get the next colour from the palette
    let circleColor = palette[friends.size % palette.length];

    // Leaf gps format
    let gps = [lat, lon];

    // Main circle
    let le_cercle = L.circle(gps,{
      radius: 5000,
      color: 'blue',
      weight:1,
      fillColor: circleColor,
      fillOpacity: 0.4
    });

    // Clickable handle to move the circle
    let la_handle = L.circleMarker(gps, {
      radius: 7,
      color: 'black',
      fillColor: handle_col,
      fillOpacity: 1,
      weight:1
    });

    // Adding information on the circle and storing infor
    le_cercle.bindPopup(text);
    myLayerGroup.addLayer(le_cercle);
    myLayerGroup.addLayer(la_handle);
    friends.set(uid, {le_cercle: le_cercle, la_handle: la_handle, text: text});
    // Display first popup
    display_first_popup(gps);

    // Configure the handle
    configure_handle(uid);

    filterAllMarkers();
    ++uid;
  }

  /** Refresh the list of friends after changing the state */
  function refreshFriendsList(){
    // Get the div en clear its content
    let myFriendsDiv = document.getElementById('friends');
    myFriendsDiv.innerHTML = '';
    let br = document.createElement('br');
    let addressesURLVar = '';
    let count = 0;
    for(const [uid, obj] of friends ){
      count ++;
      let par = document.createElement('p')
      let address = document.createTextNode(obj.text);
      par.appendChild(address);

      let button = document.createElement('button');
      let text = document.createTextNode("remove");
      button.appendChild(text); 
      button.addEventListener('click', function() {
        myLayerGroup.removeLayer(obj.le_cercle);
        myLayerGroup.removeLayer(obj.la_handle);
        friends.delete(uid);
        filterAllMarkers();
        refreshFriendsList();
      }, false);
      par.appendChild(button);
      myFriendsDiv.appendChild(par);
      //myFriendsDiv.appendChild(br);

      // Arnaud: Try to get a nice String for the address
      //addressesURLVar += obj.text.split(",")[0].split(' ').join('_')+"="+obj.le_cercle.getLatLng().lat+","+obj.le_cercle.getLatLng().lng+"&";
    }
    if(count == 0){
      let par = document.createElement('p')
        let address = document.createTextNode("No addresses yet!");
        par.appendChild(address);
        myFriendsDiv.appendChild(par);
    }
    else{
        // myFriendsDiv.innerHTML += "<button onclick=\"MFZ.clearMe()\">Reset</button>";
    }
    /*addressesURLVar = addressesURLVar.slice(0, -1);

    let parFin = document.createElement('p');
    let buttonSave = document.createElement('button');
    let textSave = document.createTextNode("Save");
    buttonSave.appendChild(textSave);
    buttonSave.addEventListener('click', function() {
      let urlBasic = window.location.href.split('?')[0] + "?" + addressesURLVar;
      console.log(urlBasic);
    });
    parFin.appendChild(buttonSave);
    myFriendsDiv.appendChild(parFin);*/
    rezoom();
  }

  /** Select an entry from the results. The entry is an object  */
  function selectEntry(entry){
    if(!friends.has(entry['display_name'])){
      addCircle(entry['lat'],entry['lon'],entry['place_id'],entry['display_name']);
      refreshFriendsList();
      document.getElementById('results').innerHTML = '';
    }
  }

  function readURLVariable()
  {
    let adressesStr = window.location.search.substring(1);
    if(adressesStr.trim() != ''){
      console.log(adressesStr);
      countId = 0;
      let adresses = adressesStr.split("&");
      if(adresses.length > 0){
        for(let i=0; i<adresses.length; i++){
          let address = adresses[i].split("=");
          let name = address[0].split('_').join(' ');
          let coordinate = address[1].split(",");
          console.log(name);
          console.log(coordinate);
          place = {};
          place['place_id'] = countId;
          place['display_name'] = name;
          place['lat'] = coordinate[0];
          place['lon'] = coordinate[1];
          selectEntry(place);
          //entry['lat'],entry['lon'],entry['place_id'],entry['display_name']
          countId ++;
        }
      }
    }
    
  }

  // --- --- --- Public API (exported) --- --- --- //

  


  function displayResults2(arr){
    //console.log(arr);
    //console.log(inputField);
    closeAllLists();
    currentFocus = -1;
    var divList, divItem;


    /*create a DIV element that will contain the items (values):*/
    divList = document.createElement("div");
    divList.setAttribute("id", inputField.id + "autocomplete-list");
    divList.setAttribute("class", "autocomplete-items");
    /*append the DIV element as a child of the autocomplete container:*/
    inputField.parentNode.appendChild(divList);
    // console.log(inputField);
    if(arr.length == 0){
      divItem = document.createElement("DIV");
      divItem.innerHTML = "No results";
      divItem.innerHTML += "<input type='hidden' value='noResults'>";
      divItem.addEventListener("click", function(e) {
        closeAllLists();
      });
      divList.appendChild(divItem);
    }
    else{
      for (i = 0; i < arr.length; i++) {
        let entry = arr[i];
        divItem = document.createElement("DIV");
        divItem.innerHTML = entry['display_name'];
        divItem.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
        divItem.addEventListener("click", function(e) {
          //inputField.value = this.getElementsByTagName("input")[0].value;
          selectEntry(entry);
          closeAllLists();
        });
        divList.appendChild(divItem);
          
      }
    }


  }
  function closeAllLists(elmnt){
    inputField.value = "";
    currentFocus = -1;
    var x = document.getElementsByClassName("autocomplete-items");
    for(var i=0; i<x.length; i++){
      if (elmnt != x[i] && elmnt != inputField){
        x[i].parentNode.removeChild(x[i]);  
      }
    }
  }
  document.addEventListener("keydown", function(e) {
    var x = document.getElementById(inputField.id + "autocomplete-list");
    if (x){ 
      x = x.getElementsByTagName("div");
    }
    if (e.keyCode == 40) { // If Arrow Down
      currentFocus++;
      AddActive(x);
    }
    else if(e.keyCode == 38){ // If Arrow Up
      currentFocus --;
      AddActive(x);
    }
    else if(e.keyCode == 13){ // If Enter
      console.log("Blop");
      //
      if(currentFocus > -1){
        e.preventDefault();
        if(x){
          x[currentFocus].click();
        }
      }
    }
  });
  function AddActive(x){
    if(!x){
      return false;
    }

    removeActive(x);

    if(currentFocus >= x.length){
      currentFocus = 0;
    }
    if(currentFocus < 0){
      currentFocus = x.length - 1;
    }

    x[currentFocus].classList.add("autocomplete-active");
  }

  function removeActive(x){
    for(var i = 0; i < x.length; i++){
      x[i].classList.remove("autocomplete-active");
    }
  }


  function displayResults(data){
    // console.log(data);

    // Acces HTML
    let myResultsDiv = document.getElementById('results');

    // Clear previous results
    myResultsDiv.innerHTML = '';

    // Process input data: no result
    if(data.length===0){
      let par = document.createElement('p');
      let address = document.createTextNode('No results');
      par.appendChild(address);
      myResultsDiv.appendChild(par);
    } else {
      // 'data' is an array of results: create a line with a "select" button per entry.
      let br = document.createElement('br');
      for(i=0; i<data.length ; i++){
        let entry = data[i];
        let par = document.createElement('p');
        let address = document.createTextNode(entry['display_name']);
        let button = document.createElement('button');
        let text = document.createTextNode("select");

        par.appendChild(address);
        button.appendChild(text);
        button.addEventListener('click', function(){ selectEntry(entry); }, false);
        par.appendChild(button);
        myResultsDiv.appendChild(par);
        myResultsDiv.appendChild(br);
      }
    }
  }

  /** Clear all circles */
  function clearMe(){
    //remove all circles
    myLayerGroup.clearLayers();
    friends = new Map();
    mymap.closePopup();
    refreshFriendsList();
    document.getElementById('results').innerHTML = '';
    filterAllMarkers();
  }

  function getFriends(){
    return friends;
  }

  // Return our function
  return {
    displayResults: displayResults,
    displayResults2: displayResults2,
    clearMe: clearMe,
    getFriends: getFriends
  };

}();



function lookupAndDraw(){
  adresse = document.getElementById('address').value;
  /* console.log(document.getElementById('search').textContent);
  console.log(adresse); */
  $.getJSON('https://nominatim.openstreetmap.org/search?format=json&limit=3&countrycodes=au&q=' + adresse, function(data) {
    MFZ.displayResults2(data);
  });
}


//const bbqColor = '#ff7f00';
//const pgColor = '#4daf4a';

const markerSize = function(){return 4;}();
  //BBQ
var markerArrays = {"bbq":[],"playground":[]};
var markerStyles = {
    "bbq":{
      radius: markerSize,
      color: 'black',
      weight:1,
      fillColor: bbqColor,
      fillOpacity: 1
    }
    ,"playground":{
      radius: markerSize,
      color: 'black',
      weight:1,
      fillColor: pgColor,
      fillOpacity: 1
    }};
var displayMarkers = {"bbq":true,"playground":true};

var markerLayers = {"bbq":L.featureGroup([]).addTo(mymap),"playground":L.featureGroup([]).addTo(mymap)};



// Comme il y a des virgule a l'interieur des champs, je rajoute 1 au header
function processMarkerFile(data,typeStr){
  let allTextLines = data.split(/\r\n|\n/);

  for(var i=1; i<allTextLines.length; i++) { //skip header
    let lines = allTextLines[i].split(',');
    let latlng = L.latLng(lines[1], lines[0]);
    let markerVisu = L.circleMarker(latlng, markerStyles[typeStr]);
    markerArrays[typeStr].push(markerVisu);
  }
  markersReady[typeStr] = true;
  filterMarkers(typeStr);
//console.log(bbqArray);
}

function filterAllMarkers(){
  filterMarkers('bbq');
  filterMarkers('playground');
}

function filterMarkers(typeStr){
  if(markersReady[typeStr]){
    layer = markerLayers[typeStr];
    layer.clearLayers();
    let markerArray = markerArrays[typeStr];
    if(displayMarkers[typeStr]){
      let markerToDraw = [];
      let friends = MFZ.getFriends();
      
      for(var i=0; i<markerArray.length; i++){
        shouldDisplay = true;
        latlong = markerArray[i].getLatLng();
        for(const [key, obj] of friends ){
          var centerFriend = obj.le_cercle.getLatLng();

          if(centerFriend.distanceTo(latlong) > 5000){
            shouldDisplay = false;
            break;
          }
        }
        if(shouldDisplay){
          markerToDraw.push(markerArray[i]);
        }
      }

      if(markerToDraw.length == 0){
        markerToDraw = markerArray;
      }
      for(var j=0; j<markerToDraw.length; j++){
        layer.addLayer(markerToDraw[j]);
      }
    }
  }
}

function changeBBQ(bbqCB){
  let str = 'bbq';
  displayMarkers[str] = bbqCB.checked;
  filterMarkers(str);
}

function changePlayground(pgCB){
  let str = 'playground';
  displayMarkers[str] = pgCB.checked;
  filterMarkers(str);
}





    </script>


  </body>
</html>
